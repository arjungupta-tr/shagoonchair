---
import Layout from '../layouts/Layout.astro';
import { AUTH_CONFIG } from '../config/auth.js';
---

<Layout title="Invoice Management - Shagoon Chair">
  <main>
    <div class="page-header">
      <div class="header-left">
        <h1>üìã Invoice Management</h1>
        <p>Professional invoice system for Shagoon Seating Chair</p>
      </div>
      <div class="header-actions">
        <a href="/bills/new" class="btn btn-primary">+ New Invoice</a>
        <button onclick="exportData()" class="btn btn-secondary">üìä Export</button>
        <button onclick="printReport()" class="btn btn-outline">üñ®Ô∏è Print Report</button>
        <button onclick="logout()" class="btn btn-danger">üö™ Logout</button>
      </div>
    </div>

    <div class="filters-section">
      <div class="filters-card">
        <h3>üîç Filter & Search</h3>
        <div class="filters-grid">
          <div class="filter-group">
            <label>Search:</label>
            <input type="text" id="searchInput" placeholder="Invoice number, customer name...">
          </div>
          <div class="filter-group">
            <label>Date Range:</label>
            <div class="date-range-inputs">
              <input type="date" id="startDate" placeholder="Start Date">
              <span class="date-separator">to</span>
              <input type="date" id="endDate" placeholder="End Date">
            </div>
          </div>
        </div>
        <div class="filter-actions">
          <button onclick="applyFilters()" class="btn btn-primary">Apply Filters</button>
          <button onclick="clearFilters()" class="btn btn-outline">Clear</button>
        </div>
      </div>
    </div>

    <div class="invoices-section">
      <div class="invoices-header">
        <h2>üìÑ Invoices</h2>
        <div class="view-options">
          <button onclick="toggleView('grid')" class="view-btn active" id="gridView">üî≤ Grid</button>
          <button onclick="toggleView('list')" class="view-btn" id="listView">üìã List</button>
        </div>
      </div>

      <div id="invoicesContainer" class="invoices-grid">
        <!-- Loading state -->
        <div id="loadingState" class="loading-container">
          <div class="spinner"></div>
          <p>Loading invoices...</p>
        </div>

        <!-- Error state -->
        <div id="errorState" class="error-container" style="display: none;">
          <div class="error-message">
            <h4>‚ö†Ô∏è Error Loading Invoices</h4>
            <p id="errorText">Failed to load invoices. Please try again.</p>
            <button onclick="loadInvoices()" class="btn btn-primary">ÔøΩ Retry</button>
          </div>
        </div>

        <!-- Table view -->
        <div id="tableView" class="invoices-table-container" style="display: none;">
          <div class="table-wrapper">
            <table class="invoices-table">
              <thead>
                <tr>
                  <th>Invoice #</th>
                  <th>Customer</th>
                  <th>Date</th>
                  <th>Amount</th>
                  <th>Status</th>
                  <th>Actions</th>
                </tr>
              </thead>
              <tbody id="invoicesTableBody">
                <!-- Dynamic content will be loaded here -->
              </tbody>
            </table>
          </div>
        </div>

        <!-- Grid view (existing cards) -->
        <div id="gridView" class="invoices-grid-container" style="display: none;">
          <!-- Dynamic cards will be loaded here -->
        </div>
      </div>

      <div class="pagination">
        <button class="btn btn-outline">‚Üê Previous</button>
        <span class="page-info">Page 1 of 5</span>
        <button class="btn btn-outline">Next ‚Üí</button>
      </div>
    </div>
  </main>
</Layout>

<style>
  .page-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    background: white;
    padding: 30px;
    border-radius: 12px;
    box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    margin-bottom: 25px;
  }

  .header-left h1 {
    margin: 0 0 5px 0;
    color: #2c3e50;
    font-size: 28px;
  }

  .header-left p {
    margin: 0;
    color: #7f8c8d;
    font-size: 16px;
  }

  .header-actions {
    display: flex;
    gap: 12px;
  }

  .filters-section {
    margin-bottom: 25px;
  }

  .filters-card {
    background: white;
    padding: 25px;
    border-radius: 12px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  }

  .filters-card h3 {
    margin: 0 0 20px 0;
    color: #2c3e50;
    display: flex;
    align-items: center;
    gap: 8px;
  }

  .filters-grid {
    display: grid;
    grid-template-columns: 2fr 1fr;
    gap: 20px;
    margin-bottom: 20px;
    align-items: end;
  }

  .filter-group {
    display: flex;
    flex-direction: column;
    gap: 5px;
  }

  .filter-group label {
    font-weight: bold;
    color: #2c3e50;
    font-size: 14px;
  }

  .filter-group input,
  .filter-group select {
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 6px;
    font-size: 14px;
  }

  .date-range-inputs {
    display: flex;
    align-items: center;
    gap: 10px;
  }

  .date-range-inputs input {
    flex: 1;
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 6px;
    font-size: 14px;
  }

  .date-separator {
    color: #7f8c8d;
    font-size: 14px;
    font-weight: 500;
  }

  .filter-actions {
    display: flex;
    gap: 10px;
  }

  .summary-cards {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 20px;
    margin-bottom: 30px;
  }

  .summary-card {
    background: white;
    padding: 25px;
    border-radius: 12px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    display: flex;
    align-items: center;
    gap: 20px;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
  }

  .summary-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 16px rgba(0,0,0,0.15);
  }

  .card-icon {
    font-size: 40px;
    width: 70px;
    height: 70px;
    border-radius: 50%;
    background: #f8f9fa;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .card-content h3 {
    margin: 0 0 5px 0;
    color: #2c3e50;
    font-size: 16px;
  }

  .card-content .amount {
    font-size: 24px;
    font-weight: bold;
    color: #27ae60;
    margin: 0;
  }

  .card-content .amount.pending {
    color: #f39c12;
  }

  .card-content .count {
    font-size: 24px;
    font-weight: bold;
    color: #3498db;
    margin: 0;
  }

  .card-content .percentage {
    font-size: 24px;
    font-weight: bold;
    color: #9b59b6;
    margin: 0;
  }

  .card-content small {
    color: #7f8c8d;
    font-size: 12px;
  }

  .invoices-section {
    background: white;
    padding: 30px;
    border-radius: 12px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  }

  .invoices-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 25px;
    padding-bottom: 15px;
    border-bottom: 2px solid #ecf0f1;
  }

  .invoices-header h2 {
    margin: 0;
    color: #2c3e50;
    display: flex;
    align-items: center;
    gap: 8px;
  }

  .view-options {
    display: flex;
    gap: 5px;
  }

  .view-btn {
    padding: 8px 16px;
    border: 1px solid #ddd;
    background: white;
    cursor: pointer;
    border-radius: 6px;
    font-size: 14px;
    transition: all 0.3s ease;
  }

  .view-btn.active {
    background: #3498db;
    color: white;
    border-color: #3498db;
  }

  .invoices-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
    gap: 20px;
    margin-bottom: 30px;
  }

  .loading-container {
    grid-column: 1 / -1;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 60px 20px;
    color: #7f8c8d;
  }

  .spinner {
    width: 40px;
    height: 40px;
    border: 4px solid #f3f3f3;
    border-top: 4px solid #3498db;
    border-radius: 50%;
    animation: spin 1s linear infinite;
    margin-bottom: 15px;
  }

  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }

  .error-container {
    grid-column: 1 / -1;
    display: flex;
    justify-content: center;
    padding: 40px 20px;
  }

  .error-message {
    background: #fee;
    border: 1px solid #fcc;
    border-radius: 8px;
    padding: 30px;
    text-align: center;
    max-width: 400px;
  }

  .error-message h4 {
    color: #e74c3c;
    margin: 0 0 10px 0;
  }

  .error-message p {
    color: #7f8c8d;
    margin: 0 0 20px 0;
  }

  .invoices-table-container {
    grid-column: 1 / -1;
    width: 100%;
  }

  .table-wrapper {
    overflow-x: auto;
    border-radius: 8px;
    border: 1px solid #e1e8ed;
  }

  .invoices-table {
    width: 100%;
    border-collapse: collapse;
    background: white;
  }

  .invoices-table th,
  .invoices-table td {
    padding: 15px 12px;
    text-align: left;
    border-bottom: 1px solid #e1e8ed;
  }

  .invoices-table th {
    background: #f8f9fa;
    font-weight: bold;
    color: #2c3e50;
    font-size: 14px;
    white-space: nowrap;
  }

  .invoices-table td {
    font-size: 14px;
  }

  .invoices-table tbody tr:hover {
    background: #f8f9fa;
  }

  .table-invoice-number {
    font-weight: bold;
    color: #2c3e50;
  }

  .table-customer {
    max-width: 200px;
  }

  .table-customer-name {
    font-weight: 600;
    color: #2c3e50;
    margin-bottom: 3px;
  }

  .table-customer-contact {
    font-size: 12px;
    color: #7f8c8d;
  }

  .table-amount {
    font-weight: bold;
    color: #27ae60;
  }

  .table-actions {
    display: flex;
    gap: 5px;
    flex-wrap: wrap;
  }

  .invoices-grid-container {
    grid-column: 1 / -1;
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
    gap: 20px;
  }

  .invoice-card {
    border: 1px solid #e1e8ed;
    border-radius: 12px;
    overflow: hidden;
    transition: all 0.3s ease;
    background: white;
  }

  .invoice-card:hover {
    border-color: #3498db;
    box-shadow: 0 4px 12px rgba(52, 152, 219, 0.15);
    transform: translateY(-2px);
  }

  .invoice-header {
    background: #f8f9fa;
    padding: 15px 20px;
    display: flex;
    justify-content: space-between;
    align-items: center;
    border-bottom: 1px solid #e1e8ed;
  }

  .invoice-number {
    font-weight: bold;
    font-size: 16px;
    color: #2c3e50;
  }

  .invoice-status {
    padding: 4px 12px;
    border-radius: 20px;
    font-size: 12px;
    font-weight: bold;
    text-transform: uppercase;
  }

  .status-paid {
    background: #d5f4e6;
    color: #27ae60;
  }

  .status-pending {
    background: #ffeaa7;
    color: #e17055;
  }

  .status-partial {
    background: #a29bfe;
    color: white;
  }

  .invoice-details {
    padding: 20px;
  }

  .invoice-details h4 {
    margin: 0 0 10px 0;
    color: #2c3e50;
    font-size: 16px;
  }

  .customer-info {
    font-size: 13px;
    color: #7f8c8d;
    margin-bottom: 15px;
    line-height: 1.5;
  }

  .invoice-meta {
    display: flex;
    flex-direction: column;
    gap: 8px;
  }

  .meta-item {
    display: flex;
    justify-content: space-between;
    font-size: 14px;
  }

  .meta-item .label {
    color: #7f8c8d;
    font-weight: normal;
  }

  .meta-item .value {
    color: #2c3e50;
    font-weight: bold;
  }

  .meta-item .value.amount {
    color: #27ae60;
  }

  .invoice-actions {
    padding: 15px 20px;
    border-top: 1px solid #e1e8ed;
    background: #f8f9fa;
    display: flex;
    gap: 8px;
    flex-wrap: wrap;
  }

  .btn {
    padding: 8px 16px;
    border: none;
    border-radius: 6px;
    text-decoration: none;
    font-size: 12px;
    cursor: pointer;
    transition: all 0.3s ease;
    display: inline-flex;
    align-items: center;
    gap: 5px;
    font-weight: 500;
  }

  .btn-sm {
    padding: 6px 12px;
    font-size: 11px;
  }

  .btn-primary {
    background: #3498db;
    color: white;
  }

  .btn-secondary {
    background: #95a5a6;
    color: white;
  }

  .btn-success {
    background: #27ae60;
    color: white;
  }

  .btn-warning {
    background: #f39c12;
    color: white;
  }

  .btn-info {
    background: #2980b9;
    color: white;
  }

  .btn-danger {
    background: #e74c3c;
    color: white;
  }

  .btn-outline {
    background: transparent;
    color: #2c3e50;
    border: 1px solid #bdc3c7;
  }

  .btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0,0,0,0.2);
  }

  .pagination {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 20px;
    margin-top: 30px;
  }

  .page-info {
    color: #7f8c8d;
    font-weight: 500;
  }

  @media (max-width: 768px) {
    .page-header {
      flex-direction: column;
      gap: 20px;
      text-align: center;
    }

    .filters-grid {
      grid-template-columns: 1fr;
      gap: 15px;
    }

    .date-range-inputs {
      flex-direction: column;
      gap: 8px;
    }

    .date-separator {
      display: none;
    }

    .summary-cards {
      grid-template-columns: 1fr;
    }

    .invoices-grid {
      grid-template-columns: 1fr;
    }

    .invoice-actions {
      justify-content: center;
    }

    .header-actions {
      flex-wrap: wrap;
      justify-content: center;
    }
  }
</style>

<script define:vars={{ AUTH_CONFIG }}>
  // Check authentication on page load
  document.addEventListener('DOMContentLoaded', () => {
    if (localStorage.getItem(AUTH_CONFIG.SESSION_KEY) !== 'true') {
      window.location.href = AUTH_CONFIG.REDIRECT_PATHS.LOGIN;
      return;
    }
    // Load invoices on page load
    loadInvoices();
  });

  let invoicesData = [];
  let currentView = 'grid';

  async function loadInvoices() {
    try {
      showLoading();
      
      // Fetch invoices from API
      const response = await fetch('/api/bills', {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        }
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      invoicesData = data.bills || []; // Changed from data.invoices to data.bills
      
      hideLoading();
      renderInvoices();
      
    } catch (error) {
      console.error('Error loading invoices:', error);
      hideLoading();
      showError('Failed to load invoices. Please check your connection and try again.');
    }
  }

  function showLoading() {
    document.getElementById('loadingState').style.display = 'block';
    document.getElementById('errorState').style.display = 'none';
    document.getElementById('tableView').style.display = 'none';
    document.getElementById('gridView').style.display = 'none';
  }

  function hideLoading() {
    document.getElementById('loadingState').style.display = 'none';
  }

  function showError(message) {
    document.getElementById('errorText').textContent = message;
    document.getElementById('errorState').style.display = 'block';
    document.getElementById('tableView').style.display = 'none';
    document.getElementById('gridView').style.display = 'none';
  }

  function renderInvoices() {
    if (currentView === 'grid') {
      renderGridView();
    } else {
      renderTableView();
    }
  }

  function renderTableView() {
    const tbody = document.getElementById('invoicesTableBody');
    tbody.innerHTML = '';

    if (invoicesData.length === 0) {
      tbody.innerHTML = `
        <tr>
          <td colspan="6" style="text-align: center; padding: 40px; color: #7f8c8d;">
            üìÑ No invoices found
          </td>
        </tr>
      `;
    } else {
      invoicesData.forEach(invoice => {
        const row = createTableRow(invoice);
        tbody.appendChild(row);
      });
    }

    document.getElementById('tableView').style.display = 'block';
    document.getElementById('gridView').style.display = 'none';
  }

  function renderGridView() {
    const container = document.getElementById('gridView');
    container.innerHTML = '';

    if (invoicesData.length === 0) {
      container.innerHTML = `
        <div style="grid-column: 1 / -1; text-align: center; padding: 40px; color: #7f8c8d;">
          üìÑ No invoices found
        </div>
      `;
    } else {
      invoicesData.forEach(invoice => {
        const card = createInvoiceCard(invoice);
        container.appendChild(card);
      });
    }

    document.getElementById('tableView').style.display = 'none';
    document.getElementById('gridView').style.display = 'block';
  }

  function createTableRow(invoice) {
    const row = document.createElement('tr');
    
    const statusClass = `status-${invoice.payment_status || 'pending'}`;
    const formattedDate = new Date(invoice.invoice_date).toLocaleDateString();
    const formattedAmount = `‚Çπ${parseFloat(invoice.total_amount || 0).toLocaleString()}`;
    
    row.innerHTML = `
      <td class="table-invoice-number">${invoice.bill_number}</td>
      <td class="table-customer">
        <div class="table-customer-name">${invoice.customer_name}</div>
        <div class="table-customer-contact">
          ${invoice.customer_phone ? `üìû ${invoice.customer_phone}` : ''}
          ${invoice.customer_email ? `<br>üìß ${invoice.customer_email}` : ''}
        </div>
      </td>
      <td>${formattedDate}</td>
      <td class="table-amount">${formattedAmount}</td>
      <td>
        <span class="invoice-status ${statusClass}">
          ${(invoice.payment_status || 'pending').toUpperCase()}
        </span>
      </td>
      <td class="table-actions">
        <a href="/invoice?id=${invoice.id}" class="btn btn-sm btn-primary">üëÅÔ∏è View</a>
        <button onclick="editInvoice(${invoice.id})" class="btn btn-sm btn-secondary">‚úèÔ∏è Edit</button>
        <button onclick="emailInvoice(${invoice.id})" class="btn btn-sm btn-info">üìß Email</button>
        ${invoice.payment_status !== 'paid' ? 
          `<button onclick="markAsPaid(${invoice.id})" class="btn btn-sm btn-success">‚úÖ Mark Paid</button>` :
          `<button onclick="printInvoice(${invoice.id})" class="btn btn-sm btn-outline">üñ®Ô∏è Print</button>`
        }
      </td>
    `;
    
    return row;
  }

  function createInvoiceCard(invoice) {
    const card = document.createElement('div');
    card.className = 'invoice-card';
    
    const statusClass = `status-${invoice.payment_status || 'pending'}`;
    const formattedDate = new Date(invoice.invoice_date).toLocaleDateString();
    const formattedAmount = `‚Çπ${parseFloat(invoice.total_amount || 0).toLocaleString()}`;
    const itemsCount = invoice.items ? invoice.items.length : 0;
    
    card.innerHTML = `
      <div class="invoice-header">
        <div class="invoice-number">${invoice.bill_number}</div>
        <div class="invoice-status ${statusClass}">
          ${(invoice.payment_status || 'pending').toUpperCase()}
        </div>
      </div>
      <div class="invoice-details">
        <h4>${invoice.customer_name}</h4>
        <p class="customer-info">
          ${invoice.customer_phone ? `üìû ${invoice.customer_phone}<br>` : ''}
          ${invoice.customer_email ? `üìß ${invoice.customer_email}` : ''}
        </p>
        <div class="invoice-meta">
          <div class="meta-item">
            <span class="label">Date:</span>
            <span class="value">${formattedDate}</span>
          </div>
          <div class="meta-item">
            <span class="label">Amount:</span>
            <span class="value amount">${formattedAmount}</span>
          </div>
          <div class="meta-item">
            <span class="label">Items:</span>
            <span class="value">${itemsCount} items</span>
          </div>
        </div>
      </div>
      <div class="invoice-actions">
        <a href="/invoice?id=${invoice.id}" class="btn btn-sm btn-primary">üëÅÔ∏è View</a>
        <button onclick="editInvoice(${invoice.id})" class="btn btn-sm btn-secondary">‚úèÔ∏è Edit</button>
        <button onclick="emailInvoice(${invoice.id})" class="btn btn-sm btn-info">üìß Email</button>
        ${invoice.payment_status !== 'paid' ? 
          `<button onclick="markAsPaid(${invoice.id})" class="btn btn-sm btn-success">‚úÖ Mark Paid</button>` :
          `<button onclick="printInvoice(${invoice.id})" class="btn btn-sm btn-outline">üñ®Ô∏è Print</button>`
        }
      </div>
    `;
    
    return card;
  }

  function toggleView(view) {
    const gridBtn = document.getElementById('gridView');
    const listBtn = document.getElementById('listView');
    
    currentView = view;
    
    if (view === 'grid') {
      gridBtn.classList.add('active');
      listBtn.classList.remove('active');
      renderGridView();
    } else {
      listBtn.classList.add('active');
      gridBtn.classList.remove('active');
      renderTableView();
    }
  }

  async function applyFilters() {
    try {
      showLoading();
      
      const search = document.getElementById('searchInput').value.trim();
      const startDate = document.getElementById('startDate').value;
      const endDate = document.getElementById('endDate').value;
      
      // Build query parameters
      const params = new URLSearchParams();
      if (search) params.append('search', search);
      if (startDate) params.append('startDate', startDate);
      if (endDate) params.append('endDate', endDate);
      
      const url = '/api/bills' + (params.toString() ? '?' + params.toString() : '');
      
      const response = await fetch(url, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        }
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      invoicesData = data.bills || []; // Changed from data.invoices to data.bills
      
      hideLoading();
      renderInvoices();
      
    } catch (error) {
      console.error('Error applying filters:', error);
      hideLoading();
      showError('Failed to filter invoices. Please try again.');
    }
  }

  function clearFilters() {
    document.getElementById('searchInput').value = '';
    document.getElementById('startDate').value = '';
    document.getElementById('endDate').value = '';
    loadInvoices(); // Reload all invoices without filters
  }

  function editInvoice(id) {
    window.location.href = `/bills/edit/${id}`;
  }

  function emailInvoice(id) {
    alert(`Email invoice ${id} functionality`);
  }

  function printInvoice(id) {
    window.open(`/invoice?id=${id}&print=true`, '_blank');
  }

  async function markAsPaid(id) {
    if (confirm('Mark this invoice as paid?')) {
      try {
        const response = await fetch(`/api/bills/${id}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            payment_status: 'paid'
          })
        });

        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }

        // Reload invoices to reflect the change
        loadInvoices();
        alert(`Invoice ${id} marked as paid successfully!`);
        
      } catch (error) {
        console.error('Error updating invoice:', error);
        alert('Failed to update invoice status. Please try again.');
      }
    }
  }

  function followUp(id) {
    alert(`Follow up functionality for invoice ${id}`);
  }

  function exportData() {
    alert('Export functionality - would generate Excel/CSV file');
  }

  function printReport() {
    window.print();
  }

  function logout() {
    localStorage.removeItem(AUTH_CONFIG.SESSION_KEY);
    alert('You have been logged out successfully.');
    window.location.href = AUTH_CONFIG.REDIRECT_PATHS.LOGIN;
  }

  // Initialize filters with current date
  document.addEventListener('DOMContentLoaded', function() {
    const today = new Date().toISOString().split('T')[0];
    const firstDay = new Date(new Date().getFullYear(), new Date().getMonth(), 1).toISOString().split('T')[0];
    
    document.getElementById('startDate').value = firstDay;
    document.getElementById('endDate').value = today;
  });
</script>
