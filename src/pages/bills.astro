---
import Layout from "../layouts/Layout.astro";
import { AUTH_CONFIG } from "../config/auth.js";
---

<Layout title="Invoice Management - Shagoon Chair">
  <main>
    <div class="page-header">
      <div class="header-left">
        <h1>üìã Invoice Management</h1>
        <p>Professional invoice system for Shagoon Seating Chair</p>
      </div>
      <div class="header-actions">
        <a href="/bills/new" class="btn btn-primary">+ New Invoice</a>
        <button onclick="logout()" class="btn btn-danger">üö™ Logout</button>
      </div>
    </div>

    <div class="filters-section">
      <div class="filters-card">
        <h3>üîç Filter & Search</h3>
        <div class="filters-grid">
          <div class="filter-group">
            <label>Search:</label>
            <input
              type="text"
              id="searchInput"
              placeholder="Invoice number, customer name..."
              onkeypress="if(event.key==='Enter') applyFilters()"
            />
          </div>
          <div class="filter-group">
            <label>Date Range:</label>
            <div class="date-range-inputs">
              <input type="date" id="startDate" placeholder="Start Date" onchange="applyFilters()" />
              <span class="date-separator">to</span>
              <input type="date" id="endDate" placeholder="End Date" onchange="applyFilters()" />
            </div>
          </div>
        </div>
        <div class="filter-actions">
          <button onclick="applyFilters()" class="btn btn-primary"
            >Apply Filters</button
          >
          <button onclick="clearFilters()" class="btn btn-outline">Clear</button
          >
        </div>
      </div>
    </div>

    <div class="invoices-section">
      <div class="invoices-header">
        <h2>üìÑ Invoices</h2>
      </div>

      <div id="invoicesContainer" class="invoices-grid">
        <!-- Loading state -->
        <div id="loadingState" class="loading-container">
          <div class="spinner"></div>
          <p>Loading invoices...</p>
        </div>

        <!-- Error state -->
        <div id="errorState" class="error-container" style="display: none;">
          <div class="error-message">
            <h4>‚ö†Ô∏è Error Loading Invoices</h4>
            <p id="errorText">Failed to load invoices. Please try again.</p>
            <button onclick="loadInvoices()" class="btn btn-primary"
              >üîÑ Retry</button
            >
          </div>
        </div>

        <!-- Table view -->
        <div
          id="tableView"
          class="invoices-table-container"
          style="display: none;"
        >
          <div class="table-wrapper">
            <table class="invoices-table">
              <thead>
                <tr>
                  <th>Bill ID</th>
                  <th>Customer Name</th>
                  <th>Phone Number</th>
                  <th>Total Amount</th>
                  <th>Item Count</th>
                  <th>Actions</th>
                </tr>
              </thead>
              <tbody id="invoicesTableBody">
                <!-- Dynamic content will be loaded here -->
              </tbody>
            </table>
          </div>
        </div>
      </div>

      <div class="pagination">
        <button id="prevBtn" onclick="goToPreviousPage()" class="btn btn-outline">‚Üê Previous</button>
        <span id="pageInfo" class="page-info">Page 1 of 1</span>
        <button id="nextBtn" onclick="goToNextPage()" class="btn btn-outline">Next ‚Üí</button>
      </div>
    </div>
  </main>
</Layout>

<style>
  .page-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    background: white;
    padding: 30px;
    border-radius: 12px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    margin-bottom: 25px;
  }

  .header-left h1 {
    margin: 0 0 5px 0;
    color: #2c3e50;
    font-size: 28px;
  }

  .header-left p {
    margin: 0;
    color: #7f8c8d;
    font-size: 16px;
  }

  .header-actions {
    display: flex;
    gap: 12px;
  }

  .filters-section {
    margin-bottom: 25px;
  }

  .filters-card {
    background: white;
    padding: 25px;
    border-radius: 12px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }

  .filters-card h3 {
    margin: 0 0 20px 0;
    color: #2c3e50;
    display: flex;
    align-items: center;
    gap: 8px;
  }

  .filters-grid {
    display: grid;
    grid-template-columns: 2fr 1fr;
    gap: 20px;
    margin-bottom: 20px;
    align-items: end;
  }

  .filter-group {
    display: flex;
    flex-direction: column;
    gap: 5px;
  }

  .filter-group label {
    font-weight: bold;
    color: #2c3e50;
    font-size: 14px;
  }

  .filter-group input,
  .filter-group select {
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 6px;
    font-size: 14px;
  }

  .date-range-inputs {
    display: flex;
    align-items: center;
    gap: 10px;
  }

  .date-range-inputs input {
    flex: 1;
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 6px;
    font-size: 14px;
  }

  .date-separator {
    color: #7f8c8d;
    font-size: 14px;
    font-weight: 500;
  }

  .filter-actions {
    display: flex;
    gap: 10px;
  }

  .summary-cards {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 20px;
    margin-bottom: 30px;
  }

  .summary-card {
    background: white;
    padding: 25px;
    border-radius: 12px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    display: flex;
    align-items: center;
    gap: 20px;
    transition:
      transform 0.3s ease,
      box-shadow 0.3s ease;
  }

  .summary-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.15);
  }

  .card-icon {
    font-size: 40px;
    width: 70px;
    height: 70px;
    border-radius: 50%;
    background: #f8f9fa;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .card-content h3 {
    margin: 0 0 5px 0;
    color: #2c3e50;
    font-size: 16px;
  }

  .card-content .amount {
    font-size: 24px;
    font-weight: bold;
    color: #27ae60;
    margin: 0;
  }

  .card-content .amount.pending {
    color: #f39c12;
  }

  .card-content .count {
    font-size: 24px;
    font-weight: bold;
    color: #3498db;
    margin: 0;
  }

  .card-content .percentage {
    font-size: 24px;
    font-weight: bold;
    color: #9b59b6;
    margin: 0;
  }

  .card-content small {
    color: #7f8c8d;
    font-size: 12px;
  }

  .invoices-section {
    background: white;
    padding: 30px;
    border-radius: 12px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }

  .invoices-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 25px;
    padding-bottom: 15px;
    border-bottom: 2px solid #ecf0f1;
  }

  .invoices-header h2 {
    margin: 0;
    color: #2c3e50;
    display: flex;
    align-items: center;
    gap: 8px;
  }

  .invoices-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
    gap: 20px;
    margin-bottom: 30px;
  }

  .loading-container {
    grid-column: 1 / -1;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 60px 20px;
    color: #7f8c8d;
  }

  .spinner {
    width: 40px;
    height: 40px;
    border: 4px solid #f3f3f3;
    border-top: 4px solid #3498db;
    border-radius: 50%;
    animation: spin 1s linear infinite;
    margin-bottom: 15px;
  }

  @keyframes spin {
    0% {
      transform: rotate(0deg);
    }
    100% {
      transform: rotate(360deg);
    }
  }

  .error-container {
    grid-column: 1 / -1;
    display: flex;
    justify-content: center;
    padding: 40px 20px;
  }

  .error-message {
    background: #fee;
    border: 1px solid #fcc;
    border-radius: 8px;
    padding: 30px;
    text-align: center;
    max-width: 400px;
  }

  .error-message h4 {
    color: #e74c3c;
    margin: 0 0 10px 0;
  }

  .error-message p {
    color: #7f8c8d;
    margin: 0 0 20px 0;
  }

  .invoices-table-container {
    grid-column: 1 / -1;
    width: 100%;
  }

  .table-wrapper {
    overflow-x: auto;
    border-radius: 8px;
    border: 1px solid #e1e8ed;
  }

  .invoices-table {
    width: 100%;
    border-collapse: collapse;
    background: white;
  }

  .invoices-table th,
  .invoices-table td {
    padding: 15px 12px;
    text-align: left;
    border-bottom: 1px solid #e1e8ed;
  }

  .invoices-table th {
    background: #f8f9fa;
    font-weight: bold;
    color: #2c3e50;
    font-size: 14px;
    white-space: nowrap;
  }

  .invoices-table td {
    font-size: 14px;
  }

  .invoices-table tbody tr:hover {
    background: #f8f9fa;
  }

  .table-invoice-number {
    font-weight: bold;
    color: #2c3e50;
  }

  .table-customer-name {
    font-weight: 600;
    color: #2c3e50;
    max-width: 200px;
  }

  .table-phone {
    font-family: monospace;
    color: #2c3e50;
  }

  .table-amount {
    font-weight: bold;
    color: #27ae60;
  }

  .table-item-count {
    color: #7f8c8d;
    text-align: center;
  }

  .table-actions {
    display: flex;
    gap: 8px;
    flex-wrap: wrap;
    justify-content: center;
    align-items: center;
  }

  .action-icon {
    font-size: 16px;
    padding: 6px;
    border: none;
    background: none;
    cursor: pointer;
    border-radius: 4px;
    transition: all 0.2s ease;
    text-decoration: none;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    width: 28px;
    height: 28px;
  }

  .action-icon:hover {
    background: #f8f9fa;
    transform: scale(1.1);
  }

  .view-icon:hover {
    background: #e3f2fd;
  }

  .edit-icon:hover {
    background: #f3e5f5;
  }

  .btn {
    padding: 8px 16px;
    border: none;
    border-radius: 6px;
    text-decoration: none;
    font-size: 12px;
    cursor: pointer;
    transition: all 0.3s ease;
    display: inline-flex;
    align-items: center;
    gap: 5px;
    font-weight: 500;
  }

  .btn-sm {
    padding: 6px 12px;
    font-size: 11px;
  }

  .btn-xs {
    padding: 4px 8px;
    font-size: 12px;
    min-width: 32px;
  }

  .btn-primary {
    background: #3498db;
    color: white;
  }

  .btn-secondary {
    background: #95a5a6;
    color: white;
  }

  .btn-success {
    background: #27ae60;
    color: white;
  }

  .btn-warning {
    background: #f39c12;
    color: white;
  }

  .btn-info {
    background: #2980b9;
    color: white;
  }

  .btn-danger {
    background: #e74c3c;
    color: white;
  }

  .btn-outline {
    background: transparent;
    color: #2c3e50;
    border: 1px solid #bdc3c7;
  }

  .btn-outline.disabled {
    opacity: 0.5;
    cursor: not-allowed;
    pointer-events: none;
  }

  .btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
  }

  .pagination {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 20px;
    margin-top: 30px;
  }

  .page-info {
    color: #7f8c8d;
    font-weight: 500;
  }

  @media (max-width: 768px) {
    .page-header {
      flex-direction: column;
      gap: 20px;
      text-align: center;
    }

    .filters-grid {
      grid-template-columns: 1fr;
      gap: 15px;
    }

    .date-range-inputs {
      flex-direction: column;
      gap: 8px;
    }

    .date-separator {
      display: none;
    }

    .header-actions {
      flex-wrap: wrap;
      justify-content: center;
    }

    .table-actions {
      flex-direction: column;
      gap: 5px;
    }

    .invoices-table th,
    .invoices-table td {
      padding: 10px 8px;
      font-size: 12px;
    }
  }
</style>

<script define:vars={{ AUTH_CONFIG }}>
  // Check authentication on page load
  document.addEventListener("DOMContentLoaded", () => {
    if (localStorage.getItem(AUTH_CONFIG.SESSION_KEY) !== "true") {
      window.location.href = AUTH_CONFIG.REDIRECT_PATHS.LOGIN;
      return;
    }
    // Load invoices on page load
    loadInvoices();
  });

  let invoicesData = [];

  async function loadInvoices() {
    await loadInvoicesWithFilters(1);
  }

  function showLoading() {
    document.getElementById("loadingState").style.display = "block";
    document.getElementById("errorState").style.display = "none";
    document.getElementById("tableView").style.display = "none";
  }

  function hideLoading() {
    document.getElementById("loadingState").style.display = "none";
  }

  function showError(message) {
    document.getElementById("errorText").textContent = message;
    document.getElementById("errorState").style.display = "block";
    document.getElementById("tableView").style.display = "none";
  }

  function renderTableView() {
    const tbody = document.getElementById("invoicesTableBody");
    tbody.innerHTML = "";

    if (invoicesData.length === 0) {
      tbody.innerHTML = `
        <tr>
          <td colspan="6" style="text-align: center; padding: 40px; color: #7f8c8d;">
            üìÑ No invoices found
          </td>
        </tr>
      `;
    } else {
      invoicesData.forEach((invoice) => {
        const row = createTableRow(invoice);
        tbody.appendChild(row);
      });
    }

    document.getElementById("tableView").style.display = "block";
  }

  function createTableRow(invoice) {
    const row = document.createElement("tr");

    const formattedAmount = `‚Çπ${parseFloat(invoice.total_amount || 0).toLocaleString()}`;
    const itemCount = invoice.items ? invoice.items.length : 0;

    row.innerHTML = `
      <td class="table-invoice-number">${invoice.bill_number}</td>
      <td class="table-customer-name">${invoice.customer_name}</td>
      <td class="table-phone">${invoice.customer_phone || "N/A"}</td>
      <td class="table-amount">${formattedAmount}</td>
      <td class="table-item-count">${itemCount} items</td>
      <td class="table-actions">
        <a href="/invoice?id=${invoice.id}" class="action-icon view-icon" title="View Invoice">üëÅÔ∏è</a>
        <button onclick="editInvoice(${invoice.id})" class="action-icon edit-icon" title="Edit Invoice">‚úèÔ∏è</button>
      </td>
    `;

    return row;
  }

  let currentPage = 1;
  let totalPages = 1;
  let currentFilters = {};

  async function loadInvoicesWithFilters(page = 1) {
    try {
      showLoading();

      const search = document.getElementById("searchInput").value.trim();
      const startDate = document.getElementById("startDate").value;
      const endDate = document.getElementById("endDate").value;

      // Build query parameters
      const params = new URLSearchParams();
      if (search) params.append("search", search);
      if (startDate) params.append("startDate", startDate);
      if (endDate) params.append("endDate", endDate);
      params.append("page", page.toString());
      params.append("limit", "10"); // 10 items per page

      // Store current filters for pagination
      currentFilters = { search, startDate, endDate };

      const url = "/api/bills" + (params.toString() ? "?" + params.toString() : "");

      const response = await fetch(url, {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
        },
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      invoicesData = data.bills || [];
      currentPage = data.page || 1;
      totalPages = Math.ceil((data.total || 0) / (data.limit || 10));

      hideLoading();
      renderTableView();
      updatePagination();
    } catch (error) {
      console.error("Error loading invoices:", error);
      hideLoading();
      showError("Failed to load invoices. Please check your connection and try again.");
    }
  }

  async function applyFilters() {
    currentPage = 1; // Reset to first page when applying new filters
    await loadInvoicesWithFilters(1);
  }

  function clearFilters() {
    document.getElementById("searchInput").value = "";
    document.getElementById("startDate").value = "";
    document.getElementById("endDate").value = "";
    currentPage = 1;
    currentFilters = {};
    loadInvoices(); // Reload all invoices without filters
  }

  function updatePagination() {
    const prevBtn = document.getElementById("prevBtn");
    const nextBtn = document.getElementById("nextBtn");
    const pageInfo = document.getElementById("pageInfo");

    pageInfo.textContent = `Page ${currentPage} of ${totalPages}`;
    
    prevBtn.disabled = currentPage <= 1;
    nextBtn.disabled = currentPage >= totalPages;

    if (currentPage <= 1) {
      prevBtn.classList.add("disabled");
    } else {
      prevBtn.classList.remove("disabled");
    }

    if (currentPage >= totalPages) {
      nextBtn.classList.add("disabled");
    } else {
      nextBtn.classList.remove("disabled");
    }
  }

  async function goToPreviousPage() {
    if (currentPage > 1) {
      await loadInvoicesWithFilters(currentPage - 1);
    }
  }

  async function goToNextPage() {
    if (currentPage < totalPages) {
      await loadInvoicesWithFilters(currentPage + 1);
    }
  }

  // Make all functions globally accessible
  window.editInvoice = function(id) {
    window.location.href = `/bills/edit/${id}`;
  }
  
  window.logout = function() {
    if (confirm("Are you sure you want to logout?")) {
      window.location.href = "/login";
    }
  }
  
  window.applyFilters = applyFilters;
  
  window.clearFilters = clearFilters;
  
  window.loadInvoices = loadInvoices;

  window.goToPreviousPage = goToPreviousPage;
  
  window.goToNextPage = goToNextPage;

  function emailInvoice(id) {
    alert(`Email invoice ${id} functionality`);
  }

  function printInvoice(id) {
    window.open(`/invoice?id=${id}&print=true`, "_blank");
  }

  async function markAsPaid(id) {
    if (confirm("Mark this invoice as paid?")) {
      try {
        const response = await fetch(`/api/bills/${id}`, {
          method: "PUT",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            payment_status: "paid",
          }),
        });

        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }

        // Reload invoices to reflect the change
        loadInvoices();
        alert(`Invoice ${id} marked as paid successfully!`);
      } catch (error) {
        console.error("Error updating invoice:", error);
        alert("Failed to update invoice status. Please try again.");
      }
    }
  }

  function followUp(id) {
    alert(`Follow up functionality for invoice ${id}`);
  }

  // Initialize filters with current date
  document.addEventListener("DOMContentLoaded", function () {
    const today = new Date().toISOString().split("T")[0];
    const firstDay = new Date(
      new Date().getFullYear(),
      new Date().getMonth(),
      1,
    )
      .toISOString()
      .split("T")[0];

    document.getElementById("startDate").value = firstDay;
    document.getElementById("endDate").value = today;
  });
</script>
