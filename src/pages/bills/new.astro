---
import Layout from '../../layouts/Layout.astro';
import { AUTH_CONFIG } from '../../config/auth.js';
---

<Layout title="Create New Invoice - Shagoon Chair">
  <main>
    <div class="page-header">
      <h1>Create New  Invoice</h1>
      <div class="header-actions">
        <a href="/bills" class="btn btn-outline">‚Üê Back to Bills</a>
        <button type="button" onclick="previewInvoice()" class="btn btn-secondary">üëÅÔ∏è Preview</button>
        <button onclick="logout()" class="btn btn-danger">üö™ Logout</button>
      </div>
    </div>

    <form id="invoiceForm" class="invoice-form">
      <div class="form-grid">
        <!-- Invoice Details Section -->
        <section class="form-section">
          <h2>üìã Invoice Details</h2>
          <div class="form-row">
            <div class="form-group">
              <label for="bill_number">Invoice Number *</label>
              <div class="input-with-button">
                <input type="text" id="bill_number" name="bill_number" required placeholder="e.g., 710">
                <button type="button" onclick="generateBillNumber()" class="btn btn-secondary btn-sm">üîÑ Generate</button>
              </div>
            </div>
            <div class="form-group">
              <label for="invoice_date">Invoice Date *</label>
              <input type="date" id="invoice_date" name="invoice_date" required>
            </div>
          </div>
          <div class="form-row">
            <div class="form-group">
              <label for="challan_number">Challan Number</label>
              <input type="text" id="challan_number" name="challan_number" placeholder="e.g., CH-001">
            </div>
            <div class="form-group">
              <label for="challan_date">Challan Date</label>
              <input type="date" id="challan_date" name="challan_date">
            </div>
          </div>
          <div class="form-row">
            <div class="form-group">
              <label for="po_number">P.O. Number</label>
              <input type="text" id="po_number" name="po_number" placeholder="e.g., PO-2025-001">
            </div>
            <div class="form-group">
              <label for="po_date">P.O. Date</label>
              <input type="date" id="po_date" name="po_date">
            </div>
          </div>
          <div class="form-row">
            <div class="form-group">
              <label for="vendor_code">Vendor Code</label>
              <input type="text" id="vendor_code" name="vendor_code" placeholder="e.g., VEN001">
            </div>
            <div class="form-group">
              <label for="hsn_code">HSN Code</label>
              <input type="text" id="hsn_code" name="hsn_code" placeholder="e.g., 9403">
            </div>
          </div>
          <div class="form-group">
            <label for="dispatch_details">Dispatch Details</label>
            <textarea id="dispatch_details" name="dispatch_details" rows="2" placeholder="e.g., Dispatched through XYZ Transport, Vehicle No. MH-01-AB-1234"></textarea>
          </div>
        </section>

        <!-- Customer Details Section -->
        <section class="form-section">
          <h2>üë§ Customer Details</h2>
          <div class="form-row">
            <div class="form-group">
              <label for="customer_name">Customer Name *</label>
              <input type="text" id="customer_name" name="customer_name" required placeholder="e.g., M/S. CUPS AND MOULDS LLP.">
            </div>
            <div class="form-group">
              <label for="customer_code">Customer Code</label>
              <input type="number" id="customer_code" name="customer_code" placeholder="e.g., 1001">
            </div>
          </div>
          <div class="form-row">
            <div class="form-group">
              <label for="customer_phone">Phone Number *</label>
              <input type="tel" id="customer_phone" name="customer_phone" required placeholder="+91 9820732807">
            </div>
            <div class="form-group">
              <label for="customer_email">Email</label>
              <input type="email" id="customer_email" name="customer_email" placeholder="customer@example.com">
            </div>
          </div>
          <div class="form-group">
            <label for="customer_address">Customer Address *</label>
            <textarea id="customer_address" name="customer_address" required rows="3" placeholder="Complete billing address"></textarea>
          </div>
          <div class="form-group">
            <label for="customer_gst_number">Customer GST Number</label>
            <input type="text" id="customer_gst_number" name="customer_gst_number" placeholder="27AAQFC3444C1ZK">
          </div>
        </section>
      </div>

      <!-- Items Section -->
      <section class="form-section">
        <h2>üõçÔ∏è Invoice Items</h2>
        <div class="items-container">
          <div class="items-header">
            <span>Sr. No</span>
            <span>Description</span>
            <span>Unit Price (‚Çπ)</span>
            <span>Qty</span>
            <span>Amount (‚Çπ)</span>
            <span>Action</span>
          </div>
          <div id="itemsList">
            <!-- Items will be dynamically added here -->
          </div>
          <button type="button" id="addItemBtn" class="btn btn-success">+ Add Item</button>
        </div>
      </section>

      <!-- Tax & Payment Section -->
      <div class="form-grid">
        <section class="form-section">
          <h2>üí∞ Tax Calculation</h2>
          <div class="form-row">
            <div class="form-group">
              <label for="cgst_percentage">CGST % *</label>
              <input type="number" id="cgst_percentage" name="cgst_percentage" value="9" step="0.01" required>
            </div>
            <div class="form-group">
              <label for="sgst_percentage">SGST % *</label>
              <input type="number" id="sgst_percentage" name="sgst_percentage" value="9" step="0.01" required>
            </div>
          </div>
          <div class="form-row">
            <div class="form-group">
              <label for="igst_percentage">IGST %</label>
              <input type="number" id="igst_percentage" name="igst_percentage" value="0" step="0.01">
            </div>
            <div class="form-group">
              <label for="discount_percentage">Discount %</label>
              <input type="number" id="discount_percentage" name="discount_percentage" value="0" step="0.01">
            </div>
          </div>
          
          <div class="calculation-summary">
            <div class="calc-row">
              <span>Subtotal:</span>
              <span id="subtotalDisplay">‚Çπ0.00</span>
            </div>
            <div class="calc-row">
              <span>CGST:</span>
              <span id="cgstDisplay">‚Çπ0.00</span>
            </div>
            <div class="calc-row">
              <span>SGST:</span>
              <span id="sgstDisplay">‚Çπ0.00</span>
            </div>
            <div class="calc-row">
              <span>IGST:</span>
              <span id="igstDisplay">‚Çπ0.00</span>
            </div>
            <div class="calc-row">
              <span>Discount:</span>
              <span id="discountDisplay">‚Çπ0.00</span>
            </div>
            <div class="calc-row total-row">
              <span><strong>Total Amount:</strong></span>
              <span id="totalDisplay"><strong>‚Çπ0.00</strong></span>
            </div>
          </div>
        </section>

        <section class="form-section">
          <h2>üí≥ Payment Details</h2>
          <div class="form-group">
            <label for="payment_method">Payment Method *</label>
            <select id="payment_method" name="payment_method" required>
              <option value="cash">Cash</option>
              <option value="card">Card</option>
              <option value="upi">UPI</option>
              <option value="bank_transfer">Bank Transfer</option>
              <option value="cheque">Cheque</option>
              <option value="dd">Demand Draft</option>
            </select>
          </div>
          <div class="form-group">
            <label for="payment_status">Payment Status *</label>
            <select id="payment_status" name="payment_status" required>
              <option value="pending">Pending</option>
              <option value="paid">Paid</option>
            </select>
          </div>
          <div class="form-group">
            <label for="payment_terms">Payment Terms</label>
            <textarea id="payment_terms" name="payment_terms" rows="2">PAYMENT ONLY BY CROSSED CHEQUES / DD PAYABLE IN MUMBAI</textarea>
          </div>
        </section>
      </div>

      <!-- Bank Details Section -->
      <section class="form-section">
        <h2>üè¶ Bank Details</h2>
        <div class="form-grid">
          <div class="form-group">
            <label for="bank_name">Bank Name</label>
            <input type="text" id="bank_name" name="bank_name" value="INDIAN BANK">
          </div>
          <div class="form-group">
            <label for="bank_account_number">Account Number</label>
            <input type="text" id="bank_account_number" name="bank_account_number" value="641205735S">
          </div>
          <div class="form-group">
            <label for="bank_branch">Branch</label>
            <input type="text" id="bank_branch" name="bank_branch" value="MALAD EAST">
          </div>
          <div class="form-group">
            <label for="bank_ifsc_code">IFSC Code</label>
            <input type="text" id="bank_ifsc_code" name="bank_ifsc_code" value="IDIB000M202">
          </div>
          <div class="form-group">
            <label for="bank_account_type">Account Type</label>
            <input type="text" id="bank_account_type" name="bank_account_type" value="CURRENT A/C">
          </div>
        </div>
      </section>

      <!-- Notes Section -->
      <section class="form-section">
        <h2>üìù Additional Notes</h2>
        <div class="form-group">
          <label for="notes">Notes</label>
          <textarea id="notes" name="notes" rows="3" placeholder="Any additional notes or comments"></textarea>
        </div>
      </section>

      <!-- Terms and Conditions Section -->
      <section class="form-section">
        <h2>üìã Terms and Conditions</h2>
        <div class="form-group">
          <label for="terms_and_conditions">Terms and Conditions</label>
          <textarea id="terms_and_conditions" name="terms_and_conditions" rows="6">‚Ä¢ Price including Fabric/guts-Tax per Mtr. Party will have to give Two alternative.
‚Ä¢ Inspection prior to dispatch if desire will be at our factory premises.
‚Ä¢ 50% advance with confirm order & balance against delivery.
‚Ä¢ Warranty period 12 Months against manufacturing defect.
‚Ä¢ Payment of the bill must every month of 15th.
‚Ä¢ Interest will be charged @ 20% on all accounts remaining unpaid after credit time.</textarea>
        </div>
      </section>

      <!-- Form Actions -->
      <div class="form-actions">
        <button type="button" onclick="saveDraft()" class="btn btn-secondary">üíæ Save as Draft</button>
        <button type="submit" class="btn btn-primary">üí∞ Create Invoice</button>
        <button type="reset" class="btn btn-outline">üîÑ Reset Form</button>
      </div>
    </form>
  </main>
</Layout>

<style>
  .page-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    background: white;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    margin-bottom: 20px;
  }

  .page-header h1 {
    margin: 0;
    color: #2c3e50;
  }

  .header-actions {
    display: flex;
    gap: 10px;
  }

  .invoice-form {
    background: white;
    padding: 30px;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  }

  .form-grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 30px;
  }

  .form-section {
    margin-bottom: 30px;
  }

  .form-section h2 {
    color: #2c3e50;
    border-bottom: 2px solid #3498db;
    padding-bottom: 10px;
    margin-bottom: 20px;
    display: flex;
    align-items: center;
    gap: 8px;
  }

  .form-row {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 15px;
  }

  .form-group {
    margin-bottom: 15px;
  }

  .form-group label {
    display: block;
    margin-bottom: 5px;
    font-weight: bold;
    color: #2c3e50;
  }

  .form-group input,
  .form-group textarea,
  .form-group select {
    width: 100%;
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-size: 14px;
    transition: border-color 0.3s ease;
  }

  .form-group input:focus,
  .form-group textarea:focus,
  .form-group select:focus {
    outline: none;
    border-color: #3498db;
    box-shadow: 0 0 0 2px rgba(52, 152, 219, 0.2);
  }

  .items-container {
    border: 1px solid #ddd;
    border-radius: 8px;
    overflow: hidden;
    margin-bottom: 20px;
  }

  .items-header {
    display: grid;
    grid-template-columns: 80px 1fr 150px 120px 150px 100px;
    gap: 15px;
    background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
    padding: 15px 20px;
    font-weight: 600;
    font-size: 14px;
    border-bottom: 2px solid #dee2e6;
    text-align: center;
    color: #495057;
    align-items: center;
  }

  .item-row {
    display: grid !important;
    grid-template-columns: 80px 1fr 150px 120px 150px 100px !important;
    gap: 15px !important;
    padding: 15px 20px !important;
    border-bottom: 1px solid #f1f3f4 !important;
    align-items: center !important;
    background: white !important;
    transition: background-color 0.2s ease;
  }

  .item-row:hover {
    background: #fafbfc;
  }

  .item-row:last-child {
    border-bottom: none;
  }

  .item-row input,
  .item-row select {
    padding: 12px !important;
    border: 1px solid #dee2e6 !important;
    border-radius: 6px !important;
    font-size: 14px !important;
    font-weight: 500 !important;
    transition: all 0.3s ease !important;
    background: white !important;
    color: #495057 !important;
    width: 100% !important;
    box-sizing: border-box !important;
  }

  .item-row input:focus,
  .item-row select:focus {
    outline: none !important;
    border-color: #3498db !important;
    box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.1) !important;
    background: #fff !important;
  }

  .item-row input::placeholder {
    color: #adb5bd !important;
    font-weight: 400 !important;
  }

  .item-total {
    font-weight: 600 !important;
    font-size: 15px !important;
    color: #27ae60 !important;
    text-align: center !important;
    padding: 12px 8px !important;
    background: linear-gradient(135deg, #f8fff9 0%, #e8f5e8 100%) !important;
    border-radius: 6px !important;
    border: 1px solid #d4edda !important;
    min-width: 100px !important;
    display: flex !important;
    align-items: center !important;
    justify-content: center !important;
  }

  .sr-no {
    font-weight: 600 !important;
    font-size: 16px !important;
    color: #3498db !important;
    text-align: center !important;
    background: linear-gradient(135deg, #f8fbff 0%, #e3f2fd 100%) !important;
    padding: 8px !important;
    border-radius: 6px !important;
    border: 1px solid #e3f2fd !important;
    display: flex !important;
    align-items: center !important;
    justify-content: center !important;
  }

  .calculation-summary {
    background: #f8f9fa;
    padding: 15px;
    border-radius: 6px;
    margin-top: 15px;
  }

  .calc-row {
    display: flex;
    justify-content: space-between;
    margin-bottom: 8px;
    padding: 4px 0;
  }

  .total-row {
    border-top: 2px solid #3498db;
    padding-top: 8px;
    margin-top: 10px;
    font-size: 16px;
  }

  .btn {
    padding: 10px 20px;
    border: none;
    border-radius: 4px;
    text-decoration: none;
    font-size: 14px;
    cursor: pointer;
    transition: all 0.3s ease;
    display: inline-flex;
    align-items: center;
    gap: 8px;
  }

  .btn-primary {
    background: #3498db;
    color: white;
  }

  .btn-secondary {
    background: #95a5a6;
    color: white;
  }

  .btn-success {
    background: #27ae60;
    color: white;
  }

  .btn-danger {
    background: #e74c3c;
    color: white;
  }

  .btn-outline {
    background: transparent;
    color: #2c3e50;
    border: 1px solid #2c3e50;
  }

  .btn-sm {
    padding: 6px 12px;
    font-size: 12px;
  }

  .input-with-button {
    display: flex;
    gap: 8px;
    align-items: center;
  }

  .input-with-button input {
    flex: 1;
  }

  .input-with-button .btn {
    white-space: nowrap;
  }

  .btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0,0,0,0.2);
  }

  .form-actions {
    display: flex;
    gap: 15px;
    justify-content: center;
    padding-top: 20px;
    border-top: 1px solid #eee;
  }

  .remove-item {
    background: linear-gradient(135deg, #e74c3c 0%, #c0392b 100%);
    color: white;
    border: none;
    padding: 10px 12px;
    border-radius: 6px;
    cursor: pointer;
    font-size: 14px;
    font-weight: 600;
    transition: all 0.3s ease;
    box-shadow: 0 2px 4px rgba(231, 76, 60, 0.2);
  }

  .remove-item:hover {
    background: linear-gradient(135deg, #c0392b 0%, #a93226 100%);
    transform: translateY(-1px);
    box-shadow: 0 4px 8px rgba(231, 76, 60, 0.3);
  }

  .btn.btn-success {
    background: linear-gradient(135deg, #27ae60 0%, #229954 100%);
    color: white;
    padding: 12px 24px;
    margin-top: 15px;
    font-weight: 600;
    box-shadow: 0 3px 6px rgba(39, 174, 96, 0.2);
  }

  .btn.btn-success:hover {
    background: linear-gradient(135deg, #229954 0%, #1e8449 100%);
    transform: translateY(-2px);
    box-shadow: 0 5px 12px rgba(39, 174, 96, 0.3);
  }

  @media (max-width: 768px) {
    .page-header {
      flex-direction: column;
      gap: 15px;
      text-align: center;
    }

    .form-grid {
      grid-template-columns: 1fr;
    }

    .form-row {
      grid-template-columns: 1fr;
    }

    .items-header {
      display: none; /* Hide header on mobile for better space usage */
    }

    .item-row {
      display: flex;
      flex-direction: column;
      gap: 12px;
      padding: 20px;
      border: 1px solid #dee2e6;
      margin-bottom: 15px;
      border-radius: 8px;
      background: white;
      box-shadow: 0 2px 4px rgba(0,0,0,0.05);
    }

    .item-row:hover {
      background: #fafbfc;
      box-shadow: 0 3px 6px rgba(0,0,0,0.1);
    }

    .item-row input {
      width: 100%;
      padding: 14px;
      font-size: 16px; /* Prevent zoom on iOS */
    }

    .item-row .sr-no {
      font-weight: 600;
      font-size: 18px;
      color: #3498db;
      text-align: center;
      padding: 12px;
      background: linear-gradient(135deg, #f8fbff 0%, #e3f2fd 100%);
      border-radius: 8px;
      border: 1px solid #e3f2fd;
    }

    .item-row .item-total {
      font-size: 18px;
      font-weight: 600;
      text-align: center;
      padding: 15px;
      background: linear-gradient(135deg, #f8fff9 0%, #e8f5e8 100%);
      border-radius: 8px;
      border: 1px solid #d4edda;
      color: #27ae60;
    }

    .remove-item {
      padding: 12px 16px;
      font-size: 16px;
      align-self: center;
      width: fit-content;
    }

    .form-actions {
      flex-direction: column;
    }
  }
</style>

<script define:vars={{ AUTH_CONFIG }}>
  // Check authentication on page load
  document.addEventListener('DOMContentLoaded', () => {
    if (localStorage.getItem(AUTH_CONFIG.SESSION_KEY) !== 'true') {
      window.location.href = AUTH_CONFIG.REDIRECT_PATHS.LOGIN;
      return;
    }
  });

  let itemCounter = 0;

  function addItem() {
    itemCounter++;
    const itemsList = document.getElementById('itemsList');
    const itemRow = document.createElement('div');
    itemRow.className = 'item-row';
    itemRow.style.cssText = `
      display: grid !important;
      grid-template-columns: 80px 1fr 150px 120px 150px 100px !important;
      gap: 15px !important;
      padding: 15px 20px !important;
      border-bottom: 1px solid #f1f3f4 !important;
      align-items: center !important;
      background: white !important;
      transition: background-color 0.2s ease;
    `;
    
    itemRow.innerHTML = `
      <span class="sr-no" style="
        font-weight: 600 !important;
        font-size: 16px !important;
        color: #3498db !important;
        text-align: center !important;
        background: linear-gradient(135deg, #f8fbff 0%, #e3f2fd 100%) !important;
        padding: 8px !important;
        border-radius: 6px !important;
        border: 1px solid #e3f2fd !important;
        display: flex !important;
        align-items: center !important;
        justify-content: center !important;
      ">${itemCounter}</span>
      <input type="text" name="items[${itemCounter}][product_description]" placeholder="Item description" required
        style="
          padding: 12px !important;
          border: 1px solid #dee2e6 !important;
          border-radius: 6px !important;
          font-size: 14px !important;
          font-weight: 500 !important;
          transition: all 0.3s ease !important;
          background: white !important;
          color: #495057 !important;
          width: 100% !important;
          box-sizing: border-box !important;
        ">
      <input type="number" name="items[${itemCounter}][unit_price]" placeholder="0.00" step="0.01" min="0" required
        style="
          padding: 12px !important;
          border: 1px solid #dee2e6 !important;
          border-radius: 6px !important;
          font-size: 14px !important;
          font-weight: 500 !important;
          transition: all 0.3s ease !important;
          background: white !important;
          color: #495057 !important;
          width: 100% !important;
          box-sizing: border-box !important;
        ">
      <input type="number" name="items[${itemCounter}][quantity]" placeholder="0" min="1" required
        style="
          padding: 12px !important;
          border: 1px solid #dee2e6 !important;
          border-radius: 6px !important;
          font-size: 14px !important;
          font-weight: 500 !important;
          transition: all 0.3s ease !important;
          background: white !important;
          color: #495057 !important;
          width: 100% !important;
          box-sizing: border-box !important;
        ">
      <span class="item-total" id="itemTotal${itemCounter}" style="
        font-weight: 600 !important;
        font-size: 15px !important;
        color: #27ae60 !important;
        text-align: center !important;
        padding: 12px 8px !important;
        background: linear-gradient(135deg, #f8fff9 0%, #e8f5e8 100%) !important;
        border-radius: 6px !important;
        border: 1px solid #d4edda !important;
        min-width: 100px !important;
        display: flex !important;
        align-items: center !important;
        justify-content: center !important;
      ">‚Çπ0.00</span>
      <button type="button" class="remove-item" style="
        background: linear-gradient(135deg, #e74c3c 0%, #c0392b 100%) !important;
        color: white !important;
        border: none !important;
        padding: 10px 12px !important;
        border-radius: 6px !important;
        cursor: pointer !important;
        font-size: 14px !important;
        font-weight: 600 !important;
        transition: all 0.3s ease !important;
        box-shadow: 0 2px 4px rgba(231, 76, 60, 0.2) !important;
      ">‚úï</button>
    `;
    
    itemsList.appendChild(itemRow);
    
    // Add event listeners after the HTML is inserted
    const unitPriceInput = itemRow.querySelector('input[name*="unit_price"]');
    const quantityInput = itemRow.querySelector('input[name*="quantity"]');
    const removeButton = itemRow.querySelector('.remove-item');
    
    // Add focus styles
    [unitPriceInput, quantityInput].forEach(input => {
      input.addEventListener('focus', function() {
        this.style.borderColor = '#3498db !important';
        this.style.boxShadow = '0 0 0 3px rgba(52, 152, 219, 0.1) !important';
      });
      input.addEventListener('blur', function() {
        this.style.borderColor = '#dee2e6 !important';
        this.style.boxShadow = 'none !important';
      });
    });
    
    // Add hover effect to remove button
    removeButton.addEventListener('mouseenter', function() {
      this.style.background = 'linear-gradient(135deg, #c0392b 0%, #a93226 100%) !important';
      this.style.transform = 'translateY(-1px) !important';
      this.style.boxShadow = '0 4px 8px rgba(231, 76, 60, 0.3) !important';
    });
    removeButton.addEventListener('mouseleave', function() {
      this.style.background = 'linear-gradient(135deg, #e74c3c 0%, #c0392b 100%) !important';
      this.style.transform = 'translateY(0) !important';
      this.style.boxShadow = '0 2px 4px rgba(231, 76, 60, 0.2) !important';
    });
    
    unitPriceInput.addEventListener('change', () => calculateItemTotal(itemCounter));
    unitPriceInput.addEventListener('input', () => calculateItemTotal(itemCounter));
    quantityInput.addEventListener('change', () => calculateItemTotal(itemCounter));
    quantityInput.addEventListener('input', () => calculateItemTotal(itemCounter));
    removeButton.addEventListener('click', function() {
      removeItem(this);
    });
    
    // Auto-calculate when fields change
    calculateTotals();
  }

  function removeItem(button) {
    const itemRow = button.parentElement;
    itemRow.remove();
    
    // Renumber all items
    renumberItems();
    calculateTotals();
  }

  function renumberItems() {
    const itemRows = document.querySelectorAll('.item-row');
    itemRows.forEach((row, index) => {
      const srNoSpan = row.querySelector('.sr-no');
      if (srNoSpan) {
        srNoSpan.textContent = index + 1;
      }
      
      // Update input names to maintain proper indexing
      const inputs = row.querySelectorAll('input');
      inputs.forEach(input => {
        if (input.name) {
          input.name = input.name.replace(/\[\d+\]/, `[${index + 1}]`);
        }
      });
      
      // Update total span ID
      const totalSpan = row.querySelector('.item-total');
      if (totalSpan) {
        totalSpan.id = `itemTotal${index + 1}`;
      }
      
      // Re-add event listeners for calculation
      const unitPriceInput = row.querySelector('input[name*="unit_price"]');
      const quantityInput = row.querySelector('input[name*="quantity"]');
      
      if (unitPriceInput) {
        unitPriceInput.addEventListener('change', () => calculateItemTotal(index + 1));
        unitPriceInput.addEventListener('input', () => calculateItemTotal(index + 1));
      }
      
      if (quantityInput) {
        quantityInput.addEventListener('change', () => calculateItemTotal(index + 1));
        quantityInput.addEventListener('input', () => calculateItemTotal(index + 1));
      }
    });
    
    // Update itemCounter to match the actual number of items
    itemCounter = itemRows.length;
  }

  function calculateItemTotal(itemId) {
    const unitPriceInput = document.querySelector(`input[name="items[${itemId}][unit_price]"]`);
    const quantityInput = document.querySelector(`input[name="items[${itemId}][quantity]"]`);
    const totalSpan = document.getElementById(`itemTotal${itemId}`);
    
    if (unitPriceInput && quantityInput && totalSpan) {
      const unitPrice = parseFloat(unitPriceInput.value) || 0;
      const quantity = parseInt(quantityInput.value) || 0;
      const total = unitPrice * quantity;
      
      totalSpan.textContent = `‚Çπ${total.toFixed(2)}`;
    }
    
    // Recalculate overall totals
    calculateTotals();
  }

  function calculateTotals() {
    let subtotal = 0;
    
    // Calculate subtotal from all items
    document.querySelectorAll('.item-total').forEach(element => {
      const value = parseFloat(element.textContent.replace('‚Çπ', '')) || 0;
      subtotal += value;
    });

    const cgstPercentage = parseFloat(document.getElementById('cgst_percentage').value) || 0;
    const sgstPercentage = parseFloat(document.getElementById('sgst_percentage').value) || 0;
    const igstPercentage = parseFloat(document.getElementById('igst_percentage').value) || 0;
    const discountPercentage = parseFloat(document.getElementById('discount_percentage').value) || 0;

    const cgstAmount = (subtotal * cgstPercentage) / 100;
    const sgstAmount = (subtotal * sgstPercentage) / 100;
    const igstAmount = (subtotal * igstPercentage) / 100;
    const discountAmount = (subtotal * discountPercentage) / 100;
    
    const totalAmount = subtotal + cgstAmount + sgstAmount + igstAmount - discountAmount;

    // Update display
    document.getElementById('subtotalDisplay').textContent = `‚Çπ${subtotal.toFixed(2)}`;
    document.getElementById('cgstDisplay').textContent = `‚Çπ${cgstAmount.toFixed(2)}`;
    document.getElementById('sgstDisplay').textContent = `‚Çπ${sgstAmount.toFixed(2)}`;
    document.getElementById('igstDisplay').textContent = `‚Çπ${igstAmount.toFixed(2)}`;
    document.getElementById('discountDisplay').textContent = `‚Çπ${discountAmount.toFixed(2)}`;
    document.getElementById('totalDisplay').textContent = `‚Çπ${totalAmount.toFixed(2)}`;
  }

  function previewInvoice() {
    // This would open a preview modal
    alert('Preview functionality would show the invoice preview');
  }

  function saveDraft() {
    // Save as draft functionality
    alert('Save as draft functionality');
  }

  // Add event listeners for tax percentage changes
  document.addEventListener('DOMContentLoaded', function() {
    // Set today's date
    document.getElementById('invoice_date').value = new Date().toISOString().split('T')[0];
    
    // Add one initial item
    addItem();

    // Add event listener for Add Item button
    document.getElementById('addItemBtn').addEventListener('click', addItem);

    // Add listeners for tax calculations
    ['cgst_percentage', 'sgst_percentage', 'igst_percentage', 'discount_percentage'].forEach(id => {
      document.getElementById(id).addEventListener('change', calculateTotals);
    });
  });

  // Form submission
  document.getElementById('invoiceForm').addEventListener('submit', async function(e) {
    e.preventDefault();
    
    // Collect form data
    const formData = new FormData(this);
    const invoiceData = Object.fromEntries(formData.entries());
    
    // Collect items data with simplified structure
    const items = [];
    const itemRows = document.querySelectorAll('.item-row');
    itemRows.forEach((row, index) => {
      const descriptionInput = row.querySelector('input[name*="product_description"]');
      const unitPriceInput = row.querySelector('input[name*="unit_price"]');
      const quantityInput = row.querySelector('input[name*="quantity"]');
      
      if (descriptionInput && descriptionInput.value.trim()) {
        const unitPrice = parseFloat(unitPriceInput.value) || 0;
        const quantity = parseInt(quantityInput.value) || 0;
        const totalPrice = unitPrice * quantity;
        
        const item = {
          sr_no: index + 1,
          product_name: descriptionInput.value.trim(), // Map description to product_name for backend compatibility
          product_description: descriptionInput.value.trim(),
          product_category: 'General', // Default category
          hsn_code: '', // Default empty
          unit_price: unitPrice,
          quantity: quantity,
          total_price: totalPrice,
          unit: 'Nos' // Default unit
        };
        
        items.push(item);
      }
    });
    
    if (items.length === 0) {
      alert('Please add at least one item to the invoice.');
      return;
    }
    
    // Calculate totals
    const subtotal = items.reduce((sum, item) => sum + item.total_price, 0);
    const cgstPercentage = parseFloat(document.getElementById('cgst_percentage').value) || 0;
    const sgstPercentage = parseFloat(document.getElementById('sgst_percentage').value) || 0;
    const igstPercentage = parseFloat(document.getElementById('igst_percentage').value) || 0;
    const discountPercentage = parseFloat(document.getElementById('discount_percentage').value) || 0;
    
    const cgstAmount = (subtotal * cgstPercentage) / 100;
    const sgstAmount = (subtotal * sgstPercentage) / 100;
    const igstAmount = (subtotal * igstPercentage) / 100;
    const discountAmount = (subtotal * discountPercentage) / 100;
    const totalTaxAmount = cgstAmount + sgstAmount + igstAmount;
    const totalAmount = subtotal + totalTaxAmount - discountAmount;
    
    // Add calculated values to invoice data
    invoiceData.items = items;
    invoiceData.subtotal = subtotal;
    invoiceData.cgst_amount = cgstAmount;
    invoiceData.sgst_amount = sgstAmount;
    invoiceData.igst_amount = igstAmount;
    invoiceData.total_tax_amount = totalTaxAmount;
    invoiceData.discount_amount = discountAmount;
    invoiceData.total_amount = totalAmount;
    
    // Structure bank details properly
    invoiceData.bank_details = {
      bank_name: invoiceData.bank_name || '',
      account_number: invoiceData.bank_account_number || '',
      branch: invoiceData.bank_branch || '',
      ifsc_code: invoiceData.bank_ifsc_code || '',
      account_type: invoiceData.bank_account_type || ''
    };
    
    // Remove individual bank fields from the main object since they're now in bank_details
    delete invoiceData.bank_name;
    delete invoiceData.bank_account_number;
    delete invoiceData.bank_branch;
    delete invoiceData.bank_ifsc_code;
    delete invoiceData.bank_account_type;
    
    // Remove the flat item fields since we have the processed items array
    Object.keys(invoiceData).forEach(key => {
      if (key.startsWith('items[') && key.includes('][')) {
        delete invoiceData[key];
      }
    });
    
    invoiceData.created_at = new Date().toISOString();
    invoiceData.updated_at = new Date().toISOString();
    
    // Log the complete invoice data to verify all fields are included
    console.log('Invoice Data to be sent:', JSON.stringify(invoiceData, null, 2));
    console.log('Invoice Data size (bytes):', JSON.stringify(invoiceData).length);
    
    try {
      console.log('üîç Sending POST request to /api/bills...');
      
      const requestBody = JSON.stringify(invoiceData);
      console.log('üìã Request body size:', requestBody.length);
      console.log('üìã Request body preview:', requestBody.substring(0, 200) + '...');
      
      const response = await fetch('/api/bills', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: requestBody
      });
      
      console.log('üì• Response status:', response.status);
      console.log('üì• Response headers:', Object.fromEntries(response.headers.entries()));
      
      if (response.ok) {
        const result = await response.json();
        console.log('‚úÖ Success response:', result);
        alert('Invoice created successfully!');
        window.location.href = '/bills';
      } else {
        const errorText = await response.text();
        console.error('‚ùå Error response text:', errorText);
        
        let errorData;
        try {
          errorData = JSON.parse(errorText);
        } catch {
          errorData = { error: 'Server returned non-JSON error', details: errorText };
        }
        
        console.error('‚ùå Error data:', errorData);
        
        // Handle specific error cases
        if (response.status === 409 && errorData.error === 'Bill number already exists') {
          const userChoice = confirm(
            `Bill number "${errorData.billNumber}" already exists. Would you like to generate a new unique bill number?`
          );
          if (userChoice) {
            await generateBillNumber();
            return; // Don't throw error, let user try again
          }
        }
        
        throw new Error(errorData.error || 'Failed to create invoice');
      }
    } catch (error) {
      console.error('‚ùå Invoice creation error:', error);
      alert('Error creating invoice: ' + error.message);
    }
  });

  function logout() {
    localStorage.removeItem(AUTH_CONFIG.SESSION_KEY);
    alert('You have been logged out successfully.');
    window.location.href = AUTH_CONFIG.REDIRECT_PATHS.LOGIN;
  }

  async function generateBillNumber() {
    try {
      console.log('üîÑ Generating unique bill number...');
      
      const response = await fetch('/api/bills?action=generate-bill-number', {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json'
        }
      });
      
      if (response.ok) {
        const result = await response.json();
        document.getElementById('bill_number').value = result.billNumber;
        console.log('‚úÖ Generated bill number:', result.billNumber);
        
        // Show success message
        const billNumberInput = document.getElementById('bill_number');
        billNumberInput.style.borderColor = '#27ae60';
        billNumberInput.style.backgroundColor = '#f8fff9';
        
        setTimeout(() => {
          billNumberInput.style.borderColor = '';
          billNumberInput.style.backgroundColor = '';
        }, 2000);
      } else {
        const errorData = await response.json();
        console.error('‚ùå Failed to generate bill number:', errorData);
        alert('Failed to generate bill number: ' + errorData.error);
      }
    } catch (error) {
      console.error('‚ùå Error generating bill number:', error);
      alert('Error generating bill number: ' + error.message);
    }
  }

  // Make functions available globally
  window.logout = logout;
  window.generateBillNumber = generateBillNumber;
</script>
